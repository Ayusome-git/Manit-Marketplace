generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  userId          String    @id
  email           String    @unique
  username        String
  phoneNo         String?   @unique
  hostelNo        Int?
  products        Product[] @relation("UserProducts")
  ratingsGiven    Rating[]  @relation("RatedBy")
  ratingsReceived Rating[]  @relation("RatedTo")
  wishlist        Wishlist[]@relation("wishlistOfUser") 
  notification    Notification[]@relation("userNotification")
  senderUser      Chat[]    @relation("senderUser")
  receiverUser    Chat[]    @relation("receiverUser")
}

model Product {
  productId        String      @id @default(uuid())
  category         String
  name             String
  description      String
  price            Int
  productCondition String
  viewCount           Int        @default(0)
  listedAt         DateTime @default(now())
  seller           User     @relation("UserProducts", fields: [sellerId], references: [userId])
  sellerId         String
  wishlistedProducts Wishlist[]@relation("wishlistedProducts")
  productImages ProductImage[]@relation("productImg")
}
model ProductImage {
  imageId Int @id @default(autoincrement())
  productId String
  imageUrl String
  productImg Product @relation("productImg",fields: [productId], references: [productId])
}

model Rating {
  ratingId    Int    @id @default(autoincrement())
  ratingValue Int
  ratedTo     String
  ratedBy     String
  ratedToUser User   @relation("RatedTo", fields: [ratedTo], references: [userId])
  ratedByUser User   @relation("RatedBy", fields: [ratedBy], references: [userId])
}

model Wishlist{
  wishlistId Int @id @default(autoincrement())
  userId String
  productId String
  wishlistofuser User @relation("wishlistOfUser",fields: [userId], references: [userId])
  wishlistedProducts Product @relation("wishlistedProducts",fields: [productId],references: [productId])
  @@unique([userId, productId])
}

model Notification{
  notificationId Int @id @default(autoincrement())
  userId String 
  message String
  isRead Boolean @default(false)
  notificationTime DateTime @default(now())
  userNotification User @relation("userNotification",fields: [userId], references: [userId])
}

model Chat{
  id Int @id
  senderId String
  receiverId String
  message String
  timestamp DateTime @default(now())
  senderUser User @relation("senderUser",fields: [senderId],references: [userId])
  receiver User @relation("receiverUser",fields: [receiverId],references: [userId])
}
