generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  userId          String         @id
  email           String         @unique
  username        String
  phoneNo         String?        @unique
  hostelNo        Int?
  products        Product[]      @relation("UserProducts")
  ratingsGiven    Rating[]       @relation("RatedBy")
  ratingsReceived Rating[]       @relation("RatedTo")
  wishlist        Wishlist[]     @relation("wishlistOfUser")
  notification    Notification[] @relation("userNotification")
  user1Chats      Chat[]         @relation("User1Chats")
  user2Chats      Chat[]         @relation("User2Chats")
  messagesSent    ChatMessage[]
}

model Product {
  productId          String         @id @default(uuid())
  category           String
  name               String
  description        String         @db.Text
  price              Int
  productCondition   String
  viewCount          Int            @default(0)
  listedAt           DateTime       @default(now())
  seller             User           @relation("UserProducts", fields: [sellerId], references: [userId], onDelete: Cascade)
  sellerId           String
  wishlistedProducts Wishlist[]     @relation("wishlistedProducts")
  productImages      ProductImage[] @relation("productImg")
}

model ProductImage {
  imageId    Int     @id @default(autoincrement())
  productId  String
  imageUrl   String
  productImg Product @relation("productImg", fields: [productId], references: [productId], onDelete: Cascade)
}

model Rating {
  ratingId    Int    @id @default(autoincrement())
  ratingValue Int
  ratedTo     String
  ratedBy     String
  ratedToUser User   @relation("RatedTo", fields: [ratedTo], references: [userId], onDelete: Cascade)
  ratedByUser User   @relation("RatedBy", fields: [ratedBy], references: [userId], onDelete: Cascade)
}

model Wishlist {
  wishlistId Int     @id @default(autoincrement())
  userId     String
  productId  String
  user       User    @relation("wishlistOfUser", fields: [userId], references: [userId], onDelete: Cascade)
  product    Product @relation("wishlistedProducts", fields: [productId], references: [productId], onDelete: Cascade)

  @@unique([userId, productId])
}

model Notification {
  notificationId   Int      @id @default(autoincrement())
  userId           String
  message          String
  isRead           Boolean  @default(false)
  notificationTime DateTime @default(now())
  userNotification User     @relation("userNotification", fields: [userId], references: [userId], onDelete: Cascade)
}

model Chat {
  id        String   @id @default(uuid())
  user1     User     @relation("User1Chats", fields: [user1Id], references: [userId], onDelete: Cascade)
  user1Id   String
  user2     User     @relation("User2Chats", fields: [user2Id], references: [userId], onDelete: Cascade)
  user2Id   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  messages ChatMessage[]

  @@unique([user1Id, user2Id])
}

model ChatMessage {
  id       String   @id @default(uuid())
  chat     Chat     @relation(fields: [chatId], references: [id], onDelete: Cascade)
  chatId   String
  sender   User     @relation(fields: [senderId], references: [userId], onDelete: Cascade)
  senderId String
  content  String
  sentAt   DateTime @default(now())
  isRead   Boolean  @default(false)
}
